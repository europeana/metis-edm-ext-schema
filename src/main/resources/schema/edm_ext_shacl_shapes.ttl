@prefix :        <http://www.europeana.eu/metis/edm/ext/> .
@prefix cc:      <http://creativecommons.org/ns#> .
@prefix dc:      <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix edm:     <http://www.europeana.eu/schemas/edm/> .
@prefix ore:     <http://www.openarchives.org/ore/terms/> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:      <http://www.w3.org/ns/shacl#> .
@prefix skos:    <http://www.w3.org/2004/02/skos/core#> .


### Property declarations ###

:dcContributorProperty
    sh:path     dc:contributor ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:contributor must be a literal or a reference." .

:dcCoverageProperty
    sh:path     dc:coverage ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:coverage must be a literal or a reference." .

:dcCreatorProperty
    sh:path     dc:creator  ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "cd:creator must be a literal or a reference." .

:dcDateProperty
    sh:path     dc:date ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:date must be a literal or a reference." .

:dcDescriptionProperty
    sh:path     dc:description  ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:pattern  "\\S" ; # Prevents invalid EDM after normalisation (removal of empty literals).
    sh:message  "dc:description must be a non-whitespace literal or a reference." .

:dcFormatProperty
    sh:path     dc:format ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:format must be a literal or a reference." .

:dcIdentifierProperty
    sh:path     dc:identifier ;
    sh:nodeKind sh:Literal ;
    sh:message  "dc:identifier must be a literal." .

:dcLanguageProperty
    sh:path     dc:language ;
    sh:nodeKind sh:Literal ;
    sh:pattern  "\\S" ; # Prevents invalid EDM after normalisation (removal of empty literals).
    sh:message  "dc:language must be a non-whitespace literal." .

:dcPublisherProperty
    sh:path     dc:publisher ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:publisher must be a literal or a reference." .

:dcRelationProperty
    sh:path     dc:relation ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:relation must be a literal or a reference." .

:dcRightsProperty
    sh:path     dc:rights ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:rights must be a literal or a reference." .

:dcSourceProperty
    sh:path     dc:source ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dc:source must be a literal or a reference." .

:dcSubjectProperty
    sh:path     dc:subject  ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:pattern  "\\S" ; # Prevents invalid EDM after normalisation (removal of empty literals).
    sh:message  "dc:subject must be a non-whitespace literal or a reference." .

:dcTitleProperty
    sh:path     dc:title ;
    sh:nodeKind sh:Literal ;
    sh:pattern  "\\S" ; # Prevents invalid EDM after normalisation (removal of empty literals).
    sh:message  "dc:title must be a non-whitespace literal." .

:dcTypeProperty
    sh:path     dc:type  ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:pattern  "\\S" ; # Prevents invalid EDM after normalisation (removal of empty literals).
    sh:message  "dc:type must be a non-whitespace literal or a reference." .

:dctermsAlternativeProperty
    sh:path     dcterms:alternative ;
    sh:nodeKind sh:Literal ;
    sh:message  "dcterms:alternative must be a literal." .

:dctermsConformsToProperty
    sh:path     dcterms:conformsTo ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:conformsTo must be a literal or a reference." .

:dctermsCreatedProperty
    sh:path     dcterms:created ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:created must be a literal or a reference." .

:dctermsExtentProperty
    sh:path     dcterms:extent ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:extent must be a literal or a reference." .

:dctermsHasFormatProperty
    sh:path     dcterms:hasFormat ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:hasFormat must be a literal or a reference." .

:dctermsHasPartProperty
    sh:path     dcterms:hasPart ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:hasPart must be a literal or a reference." .

:dctermsHasVersionProperty
    sh:path     dcterms:hasVersion ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:hasVersion must be a literal or a reference." .

:dctermsIsFormatOfProperty
    sh:path     dcterms:isFormatOf ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:isFormatOf must be a literal or a reference." .

:dctermsIsPartOfProperty
    sh:path     dcterms:isPartOf ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:isPartOf must be a literal or a reference." .

:dctermsIsReferencedByProperty
    sh:path     dcterms:isReferencedBy ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:isReferencedBy must be a literal or a reference." .

:dctermsIsReplacedByProperty
    sh:path     dcterms:isReplacedBy ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:isReplacedBy must be a literal or a reference." .

:dctermsIsRepuiredByProperty
    sh:path     dcterms:isRequiredBy ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:isRequiredBy must be a literal or a reference." .

:dctermsIssuedProperty
    sh:path     dcterms:issued ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:issued must be a literal or a reference." .

:dctermsIsVersionOfProperty
    sh:path     dcterms:isVersionOf ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:isVersionOf must be a literal or a reference." .

:dctermsMediumProperty
    sh:path     dcterms:medium ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:medium must be a literal or a reference." .

:dctermsProvenanceProperty
    sh:path     dcterms:provenance ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:provenance must be a literal or a reference." .

:dctermsReferencesProperty
    sh:path     dcterms:references ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:references must be a literal or a reference." .

:dctermsReplacesProperty
    sh:path     dcterms:replaces ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:replaces must be a literal or a reference." .

:dctermsRequiresProperty
    sh:path     dcterms:requires ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "dcterms:requires must be a literal or a reference." .

:dctermsSpatialProperty
    sh:path     dcterms:spatial ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:pattern  "\\S" ; # Prevents invalid EDM after normalisation (removal of empty literals).
    sh:message  "dcterms:spatial must be a non-whitespace literal or a reference." .

:dctermsTableOfContentsProperty
    sh:path     dcterms:tableOfContents ;
    sh:nodeKind sh:Literal ;
    sh:message  "dcterms:tableOfContents must be a literal." .

:dctermsTemporalProperty
    sh:path     dcterms:temporal ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:pattern  "\\S" ; # Prevents invalid EDM after normalisation (removal of empty literals).
    sh:message  "dcterms:temporal must be a non-whitespace literal or a reference." .

:edmCurrentLocationProperty
    sh:path     edm:currentLocation ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:maxCount 1 ;
    sh:message  "edm:currentLocation must be a literal or a reference and can only occur once." .

:edmHasMetProperty
    sh:path     edm:hasMet ;
    sh:nodeKind sh:IRI ;
    sh:message  "edm:currentLocation must be a reference." .

:edmHasTypeProperty
    sh:path     edm:hasType ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "edm:hasType must be a literal or a reference." .

:edmIncorporatesProperty
    sh:path     edm:incorporates ;
    sh:nodeKind sh:IRI ;
    sh:message  "edm:incorporates must be a reference." .

:edmIsDerivativeOfProperty
    sh:path     edm:isDerivativeOf ;
    sh:nodeKind sh:IRI ;
    sh:message  "edm:isDerivativeOf must be a reference." .

:edmIsNextInSequenceProperty
    sh:path     edm:isNextInSequence ;
    sh:nodeKind sh:IRI ;
    sh:message  "edm:isNextInSequence must be a reference." .

:edmIsRelatedToProperty
    sh:path     edm:isRelatedTo ;
    sh:nodeKind sh:IRIOrLiteral ;
    sh:message  "edm:isRelatedTo must be a literal or a reference." .

:edmIsRepresentationOfProperty
    sh:path     edm:isRepresentationOf ;
    sh:nodeKind sh:IRI ;
    sh:maxCount 1 ;
    sh:message  "edm:isRepresentationOf must be a reference and can only occur once." .

:edmIsSimilarToProperty
    sh:path     edm:isSimilarTo ;
    sh:nodeKind sh:IRI ;
    sh:message  "edm:isSimilarTo must be a reference." .

:edmIsSuccessorOfProperty
    sh:path     edm:isSuccessorOf ;
    sh:nodeKind sh:IRI ;
    sh:message  "edm:isSuccessorOf must be a reference." .

:edmRealizesProperty
    sh:path     edm:realizes ;
    sh:nodeKind sh:IRI ;
    sh:message  "edm:realizes must be a reference." .

:edmTypeProperty
    sh:path     edm:type ;
    sh:nodeKind sh:Literal ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:in       ( "TEXT" "VIDEO" "SOUND" "IMAGE" "3D" ) ;
    sh:message  "edm:type must occur exactly once and must have one of the permitted values.".

:owlSameAsProperty
    sh:path     owl:sameAs ;
    sh:nodeKind sh:IRI ;
    sh:message  "owl:sameAs must be a reference." .


# TODO in the following checks, this schema follows the documentation. But we should verify and adjust.
# TODO check: dc:coverage in the docs can also have timespan, but we enrich only for Place.
# TODO check: dcterms:medium is enriched as if it always has a Concept, but this is not clear from the docs.
# TODO check: dc:format is enriched as if it always has a Concept, but this is not clear from the docs.
# TODO check: fields that are not enriched but could be according to the docs: dc:publisher, ...
# TODO        edm:currentLocation, edm:hasType, edm:isRelatedTo


### Shape declarations ###

# This shape verifies that the various properties reference the right type of contextual classes.
# The typing conditions for contextual class references are designed to avoid failing on literals,
# or on IRIs that are not resolvable in the record.
:EdmClassWithCorrectContextualReferencesShape
    a              sh:NodeShape ;
    sh:targetClass :EdmClass ;
    sh:property    [ sh:path     [ sh:alternativePath ( dc:contributor dc:creator dc:publisher ) ] ;
                     sh:or       ( [ sh:class edm:Agent ]
                                   [ sh:not [ sh:class :EdmClass ] ] ) ;
                     sh:severity sh:Warning ;
                     sh:message  "This property should not reference an EDM class other than edm:Agent." ] ;
    sh:property    [ sh:path     [ sh:alternativePath ( dc:subject dc:type edm:hasType edm:isRelatedTo ) ] ;
                     sh:or       ( [ sh:class skos:Concept ]
                                   [ sh:not [ sh:class :EdmClass ] ] ) ;
                     sh:severity sh:Warning ;
                     sh:message  "This property should not reference an EDM class other than skos:Concept." ] ;
    sh:property    [ sh:path     [ sh:alternativePath ( dcterms:spatial edm:currentLocation ) ] ;
                     sh:or       ( [ sh:class edm:Place ]
                                   [ sh:not [ sh:class :EdmClass ] ] ) ;
                     sh:severity sh:Warning ;
                     sh:message  "This property should not reference an EDM class other than edm:Place." ] ;
    sh:property    [ sh:path     [ sh:alternativePath ( dc:date dcterms:created dcterms:issued dcterms:temporal ) ] ;
                     sh:or       ( [ sh:class edm:TimeSpan ]
                                   [ sh:not [ sh:class :EdmClass ] ] ) ;
                     sh:severity sh:Warning ;
                     sh:message  "This property should not reference an EDM class other than edm:TimeSpan." ] ;
    sh:property    [ sh:path     dc:coverage ;
                     sh:or       ( [ sh:class edm:Place ]
                                   [ sh:class edm:TimeSpan ]
                                   [ sh:not [ sh:class :EdmClass ] ] ) ;
                     sh:severity sh:Warning ;
                     sh:message  "This property should not reference an EDM class other than edm:Place or edm:TimeSpan." ] ;
    sh:property    [ sh:path     edm:hasMet ;
                     sh:or       ( [ sh:class :ContextualClass ]
                                   [ sh:not [ sh:class :EdmClass ] ] ) ;
                     sh:severity sh:Warning ;
                     sh:message  "This property should not reference an EDM class other than a contextual class." ] ;
    sh:property    [ sh:path     [ sh:alternativePath ( dc:description dc:format dc:rights dc:source dcterms:conformsTo
                                                        dcterms:extent dcterms:hasFormat dcterms:hasPart dcterms:hasVersion
                                                        dcterms:isFormatOf dcterms:isPartOf dcterms:isReferencedBy
                                                        dcterms:isReplacedBy dcterms:isRequiredBy dcterms:isVersionOf
                                                        dcterms:medium dcterms:provenance dcterms:references
                                                        dcterms:replaces dcterms:requires edm:incorporates
                                                        edm:isDerivativeOf edm:isNextInSequence edm:isRepresentationOf
                                                        edm:isSimilarTo edm:isSuccessorOf edm:realizes owl:sameAs ) ] ;
                     sh:not      [ sh:class :EdmClass ] ;
                     sh:severity sh:Warning ;
                     sh:message  "This property should not reference an EDM class." ] .

# ProvidedCHO - TODO this is to be the sh:closed shape with an error message about unexpected properties
:ProvidedCHOShape
    a              sh:NodeShape ;
    sh:targetClass edm:ProvidedCHO ;
    sh:property    :dcContributorProperty ;
    sh:property    :dcCoverageProperty ;
    sh:property    :dcCreatorProperty ;
    sh:property    :dcDateProperty ;
    sh:property    :dcDescriptionProperty ;
    sh:property    :dcFormatProperty ;
    sh:property    :dcIdentifierProperty ;
    sh:property    :dcLanguageProperty ;
    sh:property    :dcPublisherProperty ;
    sh:property    :dcRelationProperty ;
    sh:property    :dcRightsProperty ;
    sh:property    :dcSourceProperty ;
    sh:property    :dcSubjectProperty ;
    sh:property    :dcTitleProperty ;
    sh:property    :dcTypeProperty ;
    sh:property    :dctermsAlternativeProperty ;
    sh:property    :dctermsConformsToProperty ;
    sh:property    :dctermsCreatedProperty ;
    sh:property    :dctermsExtentProperty ;
    sh:property    :dctermsHasFormatProperty ;
    sh:property    :dctermsHasPartProperty ;
    sh:property    :dctermsHasVersionProperty ;
    sh:property    :dctermsIsFormatOfProperty ;
    sh:property    :dctermsIsPartOfProperty ;
    sh:property    :dctermsIsReferencedByProperty ;
    sh:property    :dctermsIsReplacedByProperty ;
    sh:property    :dctermsIsRepuiredByProperty ;
    sh:property    :dctermsIssuedProperty ;
    sh:property    :dctermsIsVersionOfProperty ;
    sh:property    :dctermsMediumProperty ;
    sh:property    :dctermsProvenanceProperty ;
    sh:property    :dctermsReferencesProperty ;
    sh:property    :dctermsReplacesProperty ;
    sh:property    :dctermsRequiresProperty ;
    sh:property    :dctermsSpatialProperty ;
    sh:property    :dctermsTableOfContentsProperty ;
    sh:property    :dctermsTemporalProperty ;
    sh:property    :edmCurrentLocationProperty ;
    sh:property    :edmHasMetProperty ;
    sh:property    :edmHasTypeProperty ;
    sh:property    :edmIncorporatesProperty ;
    sh:property    :edmIsDerivativeOfProperty ;
    sh:property    :edmIsNextInSequenceProperty ;
    sh:property    :edmIsRelatedToProperty ;
    sh:property    :edmIsRepresentationOfProperty ;
    sh:property    :edmIsSimilarToProperty ;
    sh:property    :edmIsSuccessorOfProperty ;
    sh:property    :edmRealizesProperty ;
    sh:property    :edmTypeProperty ;
    sh:property    :owlSameAsProperty .

# ProvidedCHO: There needs to be at least a description or title, and the description should be a literal.
:ProvidedCHOWithRightPropertyCombinationsShape
    a              sh:NodeShape ;
    sh:targetClass edm:ProvidedCHO ;
    sh:property    [ sh:path     dc:description ;
                     sh:nodeKind sh:Literal ;
                     sh:severity sh:Warning ;
                     sh:message  "dc:description should be a literal, not a reference." ] ;
    sh:property    [ sh:path     [ sh:alternativePath ( dc:title dc:description ) ] ;
                     sh:minCount 1 ;
                     sh:message  "At least one the following properties must be present: dc:title or dc:description" ]  ;

    # There needs to be at least a dc:subject, dc:type, dcterms:spatial or dcterms:temporal.
    sh:property    [ sh:path     [ sh:alternativePath ( dc:subject dc:type dcterms:spatial dcterms:temporal ) ] ;
                     sh:minCount 1 ;
                     sh:message  "At least one the following properties should be present: dc:subject, dc:type, dcterms:spatial or dcterms:temporal" ] .

# ProvidedCHO: If this is a TEXT object, we require a language.
:ProvidedCHOForTextWithLanguageShape
    a              sh:NodeShape ;
    sh:targetClass edm:ProvidedCHO ;
    sh:or          ( [ sh:path     dc:language ;
                       sh:minCount 1 ]
                     [ sh:not      [ sh:path    edm:type ;
                                     sh:pattern "^TEXT" ] ] ) ;
    sh:message     "At least one occurrence of the property dc:language is required if edm:type='TEXT'" .

# Aggregation
:AggregationShape
    a              sh:NodeShape ;
    sh:targetClass ore:Aggregation .

# WebResource
:WebResourceShape
    a              sh:NodeShape ;
    sh:targetClass edm:WebResource .

# Agent
:AgentShape
    a              sh:NodeShape ;
    sh:targetClass edm:Agent .

# Concept
:ConceptShape
    a              sh:NodeShape ;
    sh:targetClass skos:Concept .

# Place
:PlaceShape
    a              sh:NodeShape ;
    sh:targetClass edm:Place .

# TimeSpan
:TimeSpanShape
    a              sh:NodeShape ;
    sh:targetClass edm:TimeSpan .

# License
:LicenseShape
    a              sh:NodeShape ;
    sh:targetClass cc:License .



### LEGACY ### TODO integrate with the shapes above.
:AggregationShapeLegacy
  a              sh:NodeShape ;
  sh:targetClass ore:Aggregation ;
  sh:property    [ sh:path     edm:aggregatedCHO ;
                   sh:nodeKind sh:IRI ;
                   sh:minCount 1 ;
                   sh:maxCount 1 ;
                   sh:message  "Missing or invalid value for edm:aggregatedCHO" ] ;
  sh:property    [ sh:path     edm:provider ;
                   sh:nodeKind sh:IRIOrLiteral ;
                   sh:minCount 1 ;
                   sh:maxCount 1 ;
                   sh:message  "Missing or invalid value for edm:provider" ] ;
  sh:property    [ sh:path     edm:dataProvider ;
                   sh:nodeKind sh:IRIOrLiteral ;
                   sh:minCount 1 ;
                   sh:maxCount 1 ;
                   sh:message  "Missing or invalid value for edm:dataProvider" ] ;
  sh:property    [ sh:path     edm:rights ;
                   sh:nodeKind sh:IRI ;
                   sh:minCount 1 ;
                   sh:message  "Missing or invalid value for edm:rights" ] ;
  sh:property    [ sh:path     [ sh:alternativePath ( edm:isShownAt edm:isShownBy ) ] ;
                   sh:nodeKind sh:IRI ;
                   sh:minCount 1 ;
                   sh:message  "At least one the following properties should be present: edm:isShownAt or edm:isShownBy and should have a valid URI" ] ;
  sh:property    [ sh:path     edm:isShownAt ;
                   sh:nodeKind sh:IRI ;
                   sh:maxCount 1 ;
                   sh:message  "Only one occurrence of edm:isShownAt is allowed" ] ;
  sh:property    [ sh:path     edm:isShownBy ;
                   sh:nodeKind sh:IRI ;
                   sh:maxCount 1 ;
                   sh:message  "Only one occurrence of edm:isShownBy is allowed" ] .

